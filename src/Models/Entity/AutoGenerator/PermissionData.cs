//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF.ModelGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null生成;时间 2018-11-12 14:37:16.484
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;
using System.Collections.Generic;

namespace WebBaseFrame.Models
{

	/// <summary>
	/// 实体类PermissionData
	/// </summary>
	[Serializable, DataContract]
	public partial class PermissionData : Entity 
	{
		private static string m_tableName;
		public PermissionData():base("PermissionData") {m_tableName="PermissionData";}
		public PermissionData(string tableName):base(tableName) { m_tableName=tableName;}

		#region Model
		private int _ID;
		private int _PID;
		private int? _RID;
		private int? _MID;
		private bool _HasPermission;
		private int? _CreateUserID;
		private int? _LastUpdateUserID;
		private DateTime? _CreateDate;
		private DateTime? _LastUpdateDate;
		private bool _IsDeleted;
		/// <summary>
		/// ID 
		/// </summary>
		[DataMember]
		public int ID
		{
			get{ return _ID; }
			set
			{
				this.OnPropertyValueChange(_.ID,_ID,value);
				this._ID=value;
			}
		}
		/// <summary>
		/// PID 
		/// </summary>
		[DataMember]
		public int PID
		{
			get{ return _PID; }
			set
			{
				this.OnPropertyValueChange(_.PID,_PID,value);
				this._PID=value;
			}
		}
		/// <summary>
		/// RID 
		/// </summary>
		[DataMember]
		public int? RID
		{
			get{ return _RID; }
			set
			{
				this.OnPropertyValueChange(_.RID,_RID,value);
				this._RID=value;
			}
		}
		/// <summary>
		/// MID 
		/// </summary>
		[DataMember]
		public int? MID
		{
			get{ return _MID; }
			set
			{
				this.OnPropertyValueChange(_.MID,_MID,value);
				this._MID=value;
			}
		}
		/// <summary>
		/// HasPermission 
		/// </summary>
		[DataMember]
		public bool HasPermission
		{
			get{ return _HasPermission; }
			set
			{
				this.OnPropertyValueChange(_.HasPermission,_HasPermission,value);
				this._HasPermission=value;
			}
		}
		/// <summary>
		/// CreateUserID 
		/// </summary>
		[DataMember]
		public int? CreateUserID
		{
			get{ return _CreateUserID; }
			set
			{
				this.OnPropertyValueChange(_.CreateUserID,_CreateUserID,value);
				this._CreateUserID=value;
			}
		}
		/// <summary>
		/// LastUpdateUserID 
		/// </summary>
		[DataMember]
		public int? LastUpdateUserID
		{
			get{ return _LastUpdateUserID; }
			set
			{
				this.OnPropertyValueChange(_.LastUpdateUserID,_LastUpdateUserID,value);
				this._LastUpdateUserID=value;
			}
		}
		/// <summary>
		/// CreateDate 
		/// </summary>
		[DataMember]
		public DateTime? CreateDate
		{
			get{ return _CreateDate; }
			set
			{
				this.OnPropertyValueChange(_.CreateDate,_CreateDate,value);
				this._CreateDate=value;
			}
		}
		/// <summary>
		/// LastUpdateDate 
		/// </summary>
		[DataMember]
		public DateTime? LastUpdateDate
		{
			get{ return _LastUpdateDate; }
			set
			{
				this.OnPropertyValueChange(_.LastUpdateDate,_LastUpdateDate,value);
				this._LastUpdateDate=value;
			}
		}
		/// <summary>
		/// IsDeleted 
		/// </summary>
		[DataMember]
		public bool IsDeleted
		{
			get{ return _IsDeleted; }
			set
			{
				this.OnPropertyValueChange(_.IsDeleted,_IsDeleted,value);
				this._IsDeleted=value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.ID;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.ID};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.ID,
				_.PID,
				_.RID,
				_.MID,
				_.HasPermission,
				_.CreateUserID,
				_.LastUpdateUserID,
				_.CreateDate,
				_.LastUpdateDate,
				_.IsDeleted};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				this._ID,
				this._PID,
				this._RID,
				this._MID,
				this._HasPermission,
				this._CreateUserID,
				this._LastUpdateUserID,
				this._CreateDate,
				this._LastUpdateDate,
				this._IsDeleted};
		}
		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// PermissionData 
			/// </summary>
			public readonly static Field All = new Field("*",m_tableName);
			/// <summary>
			/// ID 
			/// </summary>
			public readonly static Field ID = new Field("ID",m_tableName,"ID");
			/// <summary>
			/// PID 
			/// </summary>
			public readonly static Field PID = new Field("PID",m_tableName,"PID");
			/// <summary>
			/// RID 
			/// </summary>
			public readonly static Field RID = new Field("RID",m_tableName,"RID");
			/// <summary>
			/// MID 
			/// </summary>
			public readonly static Field MID = new Field("MID",m_tableName,"MID");
			/// <summary>
			/// HasPermission 
			/// </summary>
			public readonly static Field HasPermission = new Field("HasPermission",m_tableName,"HasPermission");
			/// <summary>
			/// CreateUserID 
			/// </summary>
			public readonly static Field CreateUserID = new Field("CreateUserID",m_tableName,"CreateUserID");
			/// <summary>
			/// LastUpdateUserID 
			/// </summary>
			public readonly static Field LastUpdateUserID = new Field("LastUpdateUserID",m_tableName,"LastUpdateUserID");
			/// <summary>
			/// CreateDate 
			/// </summary>
			public readonly static Field CreateDate = new Field("CreateDate",m_tableName,"CreateDate");
			/// <summary>
			/// LastUpdateDate 
			/// </summary>
			public readonly static Field LastUpdateDate = new Field("LastUpdateDate",m_tableName,"LastUpdateDate");
			/// <summary>
			/// IsDeleted 
			/// </summary>
			public readonly static Field IsDeleted = new Field("IsDeleted",m_tableName,"IsDeleted");
		}
		#endregion


	}
	/// <summary>
	/// 实体类PermissionData操作类
	/// </summary>
	public partial class PermissionDataRepository
	{
		DBContext db;
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<PermissionData> Search(string tableName="")
		{
			if (string.IsNullOrEmpty(tableName))
			{
				tableName="PermissionData";
			}
				return db.Search<PermissionData>(tableName);
		}
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<PermissionData> Search(PermissionData entity)
		{
				return db.Search<PermissionData>(entity);
		}
		/// <summary>
		/// 构造方法
		/// </summary>
		public PermissionDataRepository()
		{
			db = new DBContext();
		}
		/// <summary>
		/// 构造方法
		/// <param name="connStrName">连接字符串中的名称</param>
		/// </summary>
		public PermissionDataRepository(string connStrName)
		{
			db = new DBContext(connStrName);
		}
		/// <summary>
		/// 当前db操作上下文
		/// </summary>
		public DBContext DBContext
		{
			get
			{
				return db;
			}
		}
		/// <summary>
		/// 获取实体
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public PermissionData GetPermissionData(int id)
		{
			return Search().Where(b => b.ID == id).First();
		}
		/// <summary>
		/// 获取列表
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<PermissionData> GetList(int pageIndex, int pageSize)
		{
			return this.Search().Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 获取列表
		/// <param name="tableName">表名</param>
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<PermissionData> GetList(string tableName, int pageIndex=1, int pageSize=12)
		{
			return this.Search(tableName).Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 添加实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Insert(PermissionData obj)
		{
			return db.Insert(obj);
		}
		/// <summary>
		/// 更新实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Update(PermissionData obj)
		{
			return db.Update(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Delete(PermissionData obj)
		{
			return db.Delete(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="id">id</param>
		/// </summary>
		public int Delete(int id)
		{
			var obj = Search().Where(b => b.ID == id).First();
			return db.Delete(obj);
		}
		/// <summary>
		/// 批量删除实体
		/// <param name="obj">传进的实体列表</param>
		/// </summary>
		public int Deletes(List<PermissionData> objs)
		{
			return db.Delete<PermissionData>(objs);
		}
		/// <summary>
		/// 执行sql语句
		/// <param name="sql"></param>
		/// </summary>
		public SqlSection ExecuteSQL(string sql)
		{
			return db.FromSql(sql);
		}
		/// <summary>
		/// 执行存储过程
		/// <param name="sql"></param>
		/// </summary>
		public ProcSection ExcuteProc(string procName)
		{
			return db.FromProc(procName);
		}
	}

}

