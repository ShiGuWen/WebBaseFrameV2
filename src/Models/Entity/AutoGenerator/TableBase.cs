//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF.ModelGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null生成;时间 2018-11-12 14:37:16.710
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;
using System.Collections.Generic;

namespace WebBaseFrame.Models
{

	/// <summary>
	/// 实体类TableBase
	/// </summary>
	[Serializable, DataContract]
	public partial class TableBase : Entity 
	{
		private static string m_tableName;
		public TableBase():base("TableBase") {m_tableName="TableBase";}
		public TableBase(string tableName):base(tableName) { m_tableName=tableName;}

		#region Model
		private int _ID;
		private string _TableName;
		private string _ChineseTableName;
		/// <summary>
		/// ID 主键ID
		/// </summary>
		[DataMember]
		public int ID
		{
			get{ return _ID; }
			set
			{
				this.OnPropertyValueChange(_.ID,_ID,value);
				this._ID=value;
			}
		}
		/// <summary>
		/// TableName 表名字
		/// </summary>
		[DataMember]
		public string TableName
		{
			get{ return _TableName; }
			set
			{
				this.OnPropertyValueChange(_.TableName,_TableName,value);
				this._TableName=value;
			}
		}
		/// <summary>
		/// ChineseTableName 中文表名
		/// </summary>
		[DataMember]
		public string ChineseTableName
		{
			get{ return _ChineseTableName; }
			set
			{
				this.OnPropertyValueChange(_.ChineseTableName,_ChineseTableName,value);
				this._ChineseTableName=value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.ID;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.ID};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.ID,
				_.TableName,
				_.ChineseTableName};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				this._ID,
				this._TableName,
				this._ChineseTableName};
		}
		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// TableBase 
			/// </summary>
			public readonly static Field All = new Field("*",m_tableName);
			/// <summary>
			/// ID 主键ID
			/// </summary>
			public readonly static Field ID = new Field("ID",m_tableName,"主键ID");
			/// <summary>
			/// TableName 表名字
			/// </summary>
			public readonly static Field TableName = new Field("TableName",m_tableName,"表名字");
			/// <summary>
			/// ChineseTableName 中文表名
			/// </summary>
			public readonly static Field ChineseTableName = new Field("ChineseTableName",m_tableName,"中文表名");
		}
		#endregion


	}
	/// <summary>
	/// 实体类TableBase操作类
	/// </summary>
	public partial class TableBaseRepository
	{
		DBContext db;
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<TableBase> Search(string tableName="")
		{
			if (string.IsNullOrEmpty(tableName))
			{
				tableName="TableBase";
			}
				return db.Search<TableBase>(tableName);
		}
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<TableBase> Search(TableBase entity)
		{
				return db.Search<TableBase>(entity);
		}
		/// <summary>
		/// 构造方法
		/// </summary>
		public TableBaseRepository()
		{
			db = new DBContext();
		}
		/// <summary>
		/// 构造方法
		/// <param name="connStrName">连接字符串中的名称</param>
		/// </summary>
		public TableBaseRepository(string connStrName)
		{
			db = new DBContext(connStrName);
		}
		/// <summary>
		/// 当前db操作上下文
		/// </summary>
		public DBContext DBContext
		{
			get
			{
				return db;
			}
		}
		/// <summary>
		/// 获取实体
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public TableBase GetTableBase(int id)
		{
			return Search().Where(b => b.ID == id).First();
		}
		/// <summary>
		/// 获取列表
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<TableBase> GetList(int pageIndex, int pageSize)
		{
			return this.Search().Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 获取列表
		/// <param name="tableName">表名</param>
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<TableBase> GetList(string tableName, int pageIndex=1, int pageSize=12)
		{
			return this.Search(tableName).Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 添加实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Insert(TableBase obj)
		{
			return db.Insert(obj);
		}
		/// <summary>
		/// 更新实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Update(TableBase obj)
		{
			return db.Update(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Delete(TableBase obj)
		{
			return db.Delete(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="id">id</param>
		/// </summary>
		public int Delete(int id)
		{
			var obj = Search().Where(b => b.ID == id).First();
			return db.Delete(obj);
		}
		/// <summary>
		/// 批量删除实体
		/// <param name="obj">传进的实体列表</param>
		/// </summary>
		public int Deletes(List<TableBase> objs)
		{
			return db.Delete<TableBase>(objs);
		}
		/// <summary>
		/// 执行sql语句
		/// <param name="sql"></param>
		/// </summary>
		public SqlSection ExecuteSQL(string sql)
		{
			return db.FromSql(sql);
		}
		/// <summary>
		/// 执行存储过程
		/// <param name="sql"></param>
		/// </summary>
		public ProcSection ExcuteProc(string procName)
		{
			return db.FromProc(procName);
		}
	}

}

