//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF.ModelGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null生成;时间 2018-11-12 14:37:16.303
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;
using System.Collections.Generic;

namespace WebBaseFrame.Models
{

	/// <summary>
	/// 实体类FieldBase
	/// </summary>
	[Serializable, DataContract]
	public partial class FieldBase : Entity 
	{
		private static string m_tableName;
		public FieldBase():base("FieldBase") {m_tableName="FieldBase";}
		public FieldBase(string tableName):base(tableName) { m_tableName=tableName;}

		#region Model
		private int _ID;
		private int _TableID;
		private string _ChineseFieldName;
		private string _FieldName;
		private string _FieldDataType;
		/// <summary>
		/// ID 主键ID
		/// </summary>
		[DataMember]
		public int ID
		{
			get{ return _ID; }
			set
			{
				this.OnPropertyValueChange(_.ID,_ID,value);
				this._ID=value;
			}
		}
		/// <summary>
		/// TableID 表ID
		/// </summary>
		[DataMember]
		public int TableID
		{
			get{ return _TableID; }
			set
			{
				this.OnPropertyValueChange(_.TableID,_TableID,value);
				this._TableID=value;
			}
		}
		/// <summary>
		/// ChineseFieldName 字段中文名字
		/// </summary>
		[DataMember]
		public string ChineseFieldName
		{
			get{ return _ChineseFieldName; }
			set
			{
				this.OnPropertyValueChange(_.ChineseFieldName,_ChineseFieldName,value);
				this._ChineseFieldName=value;
			}
		}
		/// <summary>
		/// FieldName 字段名字
		/// </summary>
		[DataMember]
		public string FieldName
		{
			get{ return _FieldName; }
			set
			{
				this.OnPropertyValueChange(_.FieldName,_FieldName,value);
				this._FieldName=value;
			}
		}
		/// <summary>
		/// FieldDataType 字段类型
		/// </summary>
		[DataMember]
		public string FieldDataType
		{
			get{ return _FieldDataType; }
			set
			{
				this.OnPropertyValueChange(_.FieldDataType,_FieldDataType,value);
				this._FieldDataType=value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.ID;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.ID};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.ID,
				_.TableID,
				_.ChineseFieldName,
				_.FieldName,
				_.FieldDataType};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				this._ID,
				this._TableID,
				this._ChineseFieldName,
				this._FieldName,
				this._FieldDataType};
		}
		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// FieldBase 
			/// </summary>
			public readonly static Field All = new Field("*",m_tableName);
			/// <summary>
			/// ID 主键ID
			/// </summary>
			public readonly static Field ID = new Field("ID",m_tableName,"主键ID");
			/// <summary>
			/// TableID 表ID
			/// </summary>
			public readonly static Field TableID = new Field("TableID",m_tableName,"表ID");
			/// <summary>
			/// ChineseFieldName 字段中文名字
			/// </summary>
			public readonly static Field ChineseFieldName = new Field("ChineseFieldName",m_tableName,"字段中文名字");
			/// <summary>
			/// FieldName 字段名字
			/// </summary>
			public readonly static Field FieldName = new Field("FieldName",m_tableName,"字段名字");
			/// <summary>
			/// FieldDataType 字段类型
			/// </summary>
			public readonly static Field FieldDataType = new Field("FieldDataType",m_tableName,"字段类型");
		}
		#endregion


	}
	/// <summary>
	/// 实体类FieldBase操作类
	/// </summary>
	public partial class FieldBaseRepository
	{
		DBContext db;
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<FieldBase> Search(string tableName="")
		{
			if (string.IsNullOrEmpty(tableName))
			{
				tableName="FieldBase";
			}
				return db.Search<FieldBase>(tableName);
		}
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<FieldBase> Search(FieldBase entity)
		{
				return db.Search<FieldBase>(entity);
		}
		/// <summary>
		/// 构造方法
		/// </summary>
		public FieldBaseRepository()
		{
			db = new DBContext();
		}
		/// <summary>
		/// 构造方法
		/// <param name="connStrName">连接字符串中的名称</param>
		/// </summary>
		public FieldBaseRepository(string connStrName)
		{
			db = new DBContext(connStrName);
		}
		/// <summary>
		/// 当前db操作上下文
		/// </summary>
		public DBContext DBContext
		{
			get
			{
				return db;
			}
		}
		/// <summary>
		/// 获取实体
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public FieldBase GetFieldBase(int id)
		{
			return Search().Where(b => b.ID == id).First();
		}
		/// <summary>
		/// 获取列表
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<FieldBase> GetList(int pageIndex, int pageSize)
		{
			return this.Search().Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 获取列表
		/// <param name="tableName">表名</param>
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<FieldBase> GetList(string tableName, int pageIndex=1, int pageSize=12)
		{
			return this.Search(tableName).Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 添加实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Insert(FieldBase obj)
		{
			return db.Insert(obj);
		}
		/// <summary>
		/// 更新实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Update(FieldBase obj)
		{
			return db.Update(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Delete(FieldBase obj)
		{
			return db.Delete(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="id">id</param>
		/// </summary>
		public int Delete(int id)
		{
			var obj = Search().Where(b => b.ID == id).First();
			return db.Delete(obj);
		}
		/// <summary>
		/// 批量删除实体
		/// <param name="obj">传进的实体列表</param>
		/// </summary>
		public int Deletes(List<FieldBase> objs)
		{
			return db.Delete<FieldBase>(objs);
		}
		/// <summary>
		/// 执行sql语句
		/// <param name="sql"></param>
		/// </summary>
		public SqlSection ExecuteSQL(string sql)
		{
			return db.FromSql(sql);
		}
		/// <summary>
		/// 执行存储过程
		/// <param name="sql"></param>
		/// </summary>
		public ProcSection ExcuteProc(string procName)
		{
			return db.FromProc(procName);
		}
	}

}

