//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF.ModelGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null生成;时间 2018-11-12 14:37:16.118
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;
using System.Collections.Generic;

namespace WebBaseFrame.Models
{

	/// <summary>
	/// 实体类Attachment
	/// </summary>
	[Serializable, DataContract]
	public partial class Attachment : Entity 
	{
		private static string m_tableName;
		public Attachment():base("Attachment") {m_tableName="Attachment";}
		public Attachment(string tableName):base(tableName) { m_tableName=tableName;}

		#region Model
		private int _ID;
		private string _FileName;
		private string _Name;
		private string _Fix;
		private string _Url;
		private string _Size;
		private DateTime? _CreateDate;
		private int? _CreateUserID;
		private bool _IsDeleted;
		/// <summary>
		/// ID 
		/// </summary>
		[DataMember]
		public int ID
		{
			get{ return _ID; }
			set
			{
				this.OnPropertyValueChange(_.ID,_ID,value);
				this._ID=value;
			}
		}
		/// <summary>
		/// FileName 
		/// </summary>
		[DataMember]
		public string FileName
		{
			get{ return _FileName; }
			set
			{
				this.OnPropertyValueChange(_.FileName,_FileName,value);
				this._FileName=value;
			}
		}
		/// <summary>
		/// Name 
		/// </summary>
		[DataMember]
		public string Name
		{
			get{ return _Name; }
			set
			{
				this.OnPropertyValueChange(_.Name,_Name,value);
				this._Name=value;
			}
		}
		/// <summary>
		/// Fix 
		/// </summary>
		[DataMember]
		public string Fix
		{
			get{ return _Fix; }
			set
			{
				this.OnPropertyValueChange(_.Fix,_Fix,value);
				this._Fix=value;
			}
		}
		/// <summary>
		/// Url 
		/// </summary>
		[DataMember]
		public string Url
		{
			get{ return _Url; }
			set
			{
				this.OnPropertyValueChange(_.Url,_Url,value);
				this._Url=value;
			}
		}
		/// <summary>
		/// Size 
		/// </summary>
		[DataMember]
		public string Size
		{
			get{ return _Size; }
			set
			{
				this.OnPropertyValueChange(_.Size,_Size,value);
				this._Size=value;
			}
		}
		/// <summary>
		/// CreateDate 
		/// </summary>
		[DataMember]
		public DateTime? CreateDate
		{
			get{ return _CreateDate; }
			set
			{
				this.OnPropertyValueChange(_.CreateDate,_CreateDate,value);
				this._CreateDate=value;
			}
		}
		/// <summary>
		/// CreateUserID 
		/// </summary>
		[DataMember]
		public int? CreateUserID
		{
			get{ return _CreateUserID; }
			set
			{
				this.OnPropertyValueChange(_.CreateUserID,_CreateUserID,value);
				this._CreateUserID=value;
			}
		}
		/// <summary>
		/// IsDeleted 
		/// </summary>
		[DataMember]
		public bool IsDeleted
		{
			get{ return _IsDeleted; }
			set
			{
				this.OnPropertyValueChange(_.IsDeleted,_IsDeleted,value);
				this._IsDeleted=value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.ID;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.ID};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.ID,
				_.FileName,
				_.Name,
				_.Fix,
				_.Url,
				_.Size,
				_.CreateDate,
				_.CreateUserID,
				_.IsDeleted};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				this._ID,
				this._FileName,
				this._Name,
				this._Fix,
				this._Url,
				this._Size,
				this._CreateDate,
				this._CreateUserID,
				this._IsDeleted};
		}
		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// Attachment 
			/// </summary>
			public readonly static Field All = new Field("*",m_tableName);
			/// <summary>
			/// ID 
			/// </summary>
			public readonly static Field ID = new Field("ID",m_tableName,"ID");
			/// <summary>
			/// FileName 
			/// </summary>
			public readonly static Field FileName = new Field("FileName",m_tableName,"FileName");
			/// <summary>
			/// Name 
			/// </summary>
			public readonly static Field Name = new Field("Name",m_tableName,"Name");
			/// <summary>
			/// Fix 
			/// </summary>
			public readonly static Field Fix = new Field("Fix",m_tableName,"Fix");
			/// <summary>
			/// Url 
			/// </summary>
			public readonly static Field Url = new Field("Url",m_tableName,"Url");
			/// <summary>
			/// Size 
			/// </summary>
			public readonly static Field Size = new Field("Size",m_tableName,"Size");
			/// <summary>
			/// CreateDate 
			/// </summary>
			public readonly static Field CreateDate = new Field("CreateDate",m_tableName,"CreateDate");
			/// <summary>
			/// CreateUserID 
			/// </summary>
			public readonly static Field CreateUserID = new Field("CreateUserID",m_tableName,"CreateUserID");
			/// <summary>
			/// IsDeleted 
			/// </summary>
			public readonly static Field IsDeleted = new Field("IsDeleted",m_tableName,"IsDeleted");
		}
		#endregion


	}
	/// <summary>
	/// 实体类Attachment操作类
	/// </summary>
	public partial class AttachmentRepository
	{
		DBContext db;
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<Attachment> Search(string tableName="")
		{
			if (string.IsNullOrEmpty(tableName))
			{
				tableName="Attachment";
			}
				return db.Search<Attachment>(tableName);
		}
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<Attachment> Search(Attachment entity)
		{
				return db.Search<Attachment>(entity);
		}
		/// <summary>
		/// 构造方法
		/// </summary>
		public AttachmentRepository()
		{
			db = new DBContext();
		}
		/// <summary>
		/// 构造方法
		/// <param name="connStrName">连接字符串中的名称</param>
		/// </summary>
		public AttachmentRepository(string connStrName)
		{
			db = new DBContext(connStrName);
		}
		/// <summary>
		/// 当前db操作上下文
		/// </summary>
		public DBContext DBContext
		{
			get
			{
				return db;
			}
		}
		/// <summary>
		/// 获取实体
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public Attachment GetAttachment(int id)
		{
			return Search().Where(b => b.ID == id).First();
		}
		/// <summary>
		/// 获取列表
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<Attachment> GetList(int pageIndex, int pageSize)
		{
			return this.Search().Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 获取列表
		/// <param name="tableName">表名</param>
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<Attachment> GetList(string tableName, int pageIndex=1, int pageSize=12)
		{
			return this.Search(tableName).Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 添加实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Insert(Attachment obj)
		{
			return db.Insert(obj);
		}
		/// <summary>
		/// 更新实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Update(Attachment obj)
		{
			return db.Update(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="obj">传进的实体</param>
		/// </summary>
		public int Delete(Attachment obj)
		{
			return db.Delete(obj);
		}
		/// <summary>
		/// 删除实体
		/// <param name="id">id</param>
		/// </summary>
		public int Delete(int id)
		{
			var obj = Search().Where(b => b.ID == id).First();
			return db.Delete(obj);
		}
		/// <summary>
		/// 批量删除实体
		/// <param name="obj">传进的实体列表</param>
		/// </summary>
		public int Deletes(List<Attachment> objs)
		{
			return db.Delete<Attachment>(objs);
		}
		/// <summary>
		/// 执行sql语句
		/// <param name="sql"></param>
		/// </summary>
		public SqlSection ExecuteSQL(string sql)
		{
			return db.FromSql(sql);
		}
		/// <summary>
		/// 执行存储过程
		/// <param name="sql"></param>
		/// </summary>
		public ProcSection ExcuteProc(string procName)
		{
			return db.FromProc(procName);
		}
	}

}

